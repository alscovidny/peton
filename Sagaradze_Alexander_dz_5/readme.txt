Добрый вечер, Иван!

1-2. Задания затруднений не вызвали

3. В задании 3 тестируются два случая: если список klasses меньше списка tutors или наоборот. Если список klasses меньше tutors, то удлиняем список klasses элементами None на длину len(tutors) - len(klasses). При этом, если изначально klasses больше tutors, то получается, мы увеличим список klasses на пустой список, то есть оставим прежнего размера. Ну и, конечно, стоит сказать, что мы умышленно истощили генератор (при тестировании второго пакета данных). Хотя признаюсь, были мысли насчет функции zip.

4. Сделал внутри задания две функции: генератором и list comprehensions. Попытался сравнить их производительность путём измерения времени суммирования всех элементов. Также оценил количество потребляемой памяти. Вывод следующий: немного быстрее работает список (созданный через list comprehensions в моем случае), но расходует при этом больше памяти, чем генератор.

5. В файле task_5_5.py финальный вариант. Однако на всякий случай приложил файл (файл task_5_5_testing.py), где тестировал производительность функцией из 4 задания. Там я создал рандомный список на 10000 элементов из случайных чисел от 1 до 10000. Интересно, но если выводить объект filter (в функции clever_filter), то он весит всего 48 байт, но выполняет арифметическую операцию за ~1.8 секунд, что на 5 порядков дольше, чем в лоб написанный simple_filter. Но если выводить list(filter ....) в функции clever_filter, то он потребляет памяти еще больше, чем simple_filter, а времени на арифметические операции требует примерно столько же, сколько simple_filter. Но зато лаконично.
